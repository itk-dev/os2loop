{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
{# Import macros #}
{% import '@os2loop_theme/macros.html.twig' as macros %}

{# Unique table of contents macro #}
{% macro table_of_contents(items, collection, node) %}
  {% if items %}
    <ol>
      {% for item in items %}
        {% set document = item.document %}
        <li>
          <a href="{{ path('entity.node.canonical', {node: document.id, collection: collection.id}) }}"
            {{ node.id == document.id ? 'class="active" aria-current="true"' }}
          ><span class="document-title">{{ document.title.value }}</span></a>
          {{ item.children ? _self.table_of_contents(item.children, collection, node) }}
        </li>
      {% endfor %}
    </ol>
  {% endif %}
{% endmacro %}

{# Tabs for document #}
{% set tabs = [
  {'id': 'document', 'name': 'Document'|t},
  {'id': 'about-document', 'name': 'About document'|t}
] %}

{% if os2loop_documents_collection|default(false) %}
  {% set tabs = tabs|merge([
    {'id': 'about-collection', 'name': 'Document collection'|t}
  ]) %}
{% elseif os2loop_documents_collections|default(false) %}
  {% set tabs = tabs|merge([
    {'id': 'about-collections', 'name': 'Document collections'|t}
  ]) %}
{% endif %}

<article{{ attributes }}>
  {% include '@os2loop_theme/navigation/content-tabs.html.twig' with {'tabs': tabs, 'id': 'document-tabs'} %}
  <div class="tab-content" id="document-tabs-content">
    <div class="tab-pane show active" id="document" role="tabpanel" aria-labelledby="document-tab">
      {{ macros.title(label, "document", node, content) }}
      <div{{ content_attributes.addClass('os2loop-main-content') }}>
        {{ content.os2loop_documents_info_box }}
        {{ content.os2loop_documents_document_body }}
        {{ content.os2loop_documents_document_conte }}
      </div>
    </div>
    <div class="tab-pane" id="about-document" role="tabpanel" aria-labelledby="about-document-tab">
      {{ macros.title(label, "document", node, content, false) }}
      <div{{ content_attributes.addClass("block-secondary-gray") }}>
        <div>{{ content.os2loop_documents_document_autho }}</div>
        <div>{{ content.os2loop_shared_version }}</div>
        <div>{{ content.os2loop_shared_approver }}</div>
        <div>{{ content.os2loop_shared_approval_date }}</div>
        <div>{{ content.os2loop_shared_rev_date }}</div>
      </div>
    </div>
    {% if os2loop_documents_collection|default(false) %}
      <div class="tab-pane" id="about-collection" role="tabpanel" aria-labelledby="about-collection">
        {{ macros.title(os2loop_documents_collection.title.value, "collection", os2loop_documents_collection, content, true, {link: true}) }}
        {% if os2loop_documents_collection_tree|default(false) %}
          <div class="documents-in-collection">
            {{ macros.table_of_contents(os2loop_documents_collection_tree, os2loop_documents_collection, node.id) }}
          </div>
        {% endif %}
      </div>
    {% elseif os2loop_documents_collections|default(false) %}
      <div class="tab-pane" id="about-collections" role="tabpanel" aria-labelledby="about-collections">
        {# We use div here to prevent it from appearing in TOC #}
        <div class="h5">{{ 'Document is part of these collections'|t }}</div>
        <ol>
          {% for collection in os2loop_documents_collections %}
            <li><a href="{{ path('entity.node.canonical', {node: node.id, collection: collection.id, collection: collection.id}) }}">{{ collection.title.value }}</a></li>
          {% endfor %}
        </ol>
      </div>
    {% endif %}
  </div>
</article>
