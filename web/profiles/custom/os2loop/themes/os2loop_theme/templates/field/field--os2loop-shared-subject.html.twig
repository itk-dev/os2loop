{#
/**
 * @file
 * Default theme implementation for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 *
 * @ingroup themeable
 */
#}
{% set title_classes = [
    label_display == 'visually_hidden' ? 'visually-hidden',
    label_display == 'inline' ? 'os2loop-title-text-inline col-auto',
    label_display != 'inline' ? 'os2loop-title-text col-auto',
  ]
%}
{% if label_hidden %}
  {% if multiple %}
    {% for item in items %}
      <div{{ item.attributes }}>{{ item.content }}</div>
    {% endfor %}
  {% else %}
    {% for item in items %}
      {{ item.content }}
    {% endfor %}
  {% endif %}
{% elseif label_display == 'inline' %}
  <span{{ attributes }}>
    <span{{ title_attributes.addClass(title_classes) }}>{{ label }}:</span>
    {% if multiple %}
      <span class="col">
    {% endif %}
    {% for item in items %}
      {% set color_picker_value = item.content['#options'].entity.os2loop_taxonomy_color_picker.value|default('') %}
      <span{{ item.attributes.addClass(color_picker_value, 'badge badge-success') }}>{{ item.content }}</span>
    {% endfor %}
    {% if multiple %}
      </span>
    {% endif %}
  </span>
{% else %}
  <div{{ attributes.addClass("os2loop-title row") }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div class="col">
    {% endif %}
    {% for item in items %}
      <!-- TODO: Create twig link with variables, so we only have an a tag or an span tag.
        for links <a href="#" class="badge badge-secondary">Link text</a>
        for others non clickable <span class="badge badge-gray">Badge text</span>
      -->

      <span{{ item.attributes.addClass(color_picker_value, 'badge badge-success') }}>{{ item.content }}</span>
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
